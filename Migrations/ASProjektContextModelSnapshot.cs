// <auto-generated />
using System;
using ASProjekt.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ASProjekt.Migrations
{
    [DbContext(typeof(ASProjektContext))]
    partial class ASProjektContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("ASProjekt.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_id");

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("NumerRej")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("int")
                        .HasColumnName("Numer_rej");

                    b.Property<int>("RokProdukcji")
                        .HasMaxLength(160)
                        .HasColumnType("int")
                        .HasColumnName("Rok_produkcji");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("cars");
                });

            modelBuilder.Entity("ASProjekt.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("ASProjekt.Models.Mechanic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("mechanics");
                });

            modelBuilder.Entity("ASProjekt.Models.Repair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CarsId")
                        .HasColumnType("int")
                        .HasColumnName("cars_id");

                    b.Property<DateTime?>("DataNaprawy")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("date")
                        .HasColumnName("Data_naprawy");

                    b.Property<int?>("MechanicId")
                        .HasColumnType("int")
                        .HasColumnName("mechanic_id");

                    b.Property<string>("NazwaNaprawy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nazwa_naprawy");

                    b.Property<string>("OpisNaprawy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Opis_naprawy");

                    b.HasKey("Id");

                    b.HasIndex("CarsId");

                    b.HasIndex("MechanicId");

                    b.ToTable("repairs");
                });

            modelBuilder.Entity("ASProjekt.Models.Car", b =>
                {
                    b.HasOne("ASProjekt.Models.Client", "Client")
                        .WithMany("Cars")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_cars_clients");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ASProjekt.Models.Repair", b =>
                {
                    b.HasOne("ASProjekt.Models.Car", "Cars")
                        .WithMany("Repairs")
                        .HasForeignKey("CarsId")
                        .HasConstraintName("FK_repairs_cars");

                    b.HasOne("ASProjekt.Models.Mechanic", "Mechanic")
                        .WithMany("Repairs")
                        .HasForeignKey("MechanicId")
                        .HasConstraintName("FK_repairs_mechanics");

                    b.Navigation("Cars");

                    b.Navigation("Mechanic");
                });

            modelBuilder.Entity("ASProjekt.Models.Car", b =>
                {
                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("ASProjekt.Models.Client", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("ASProjekt.Models.Mechanic", b =>
                {
                    b.Navigation("Repairs");
                });
#pragma warning restore 612, 618
        }
    }
}
